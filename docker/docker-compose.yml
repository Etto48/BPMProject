services:
  frontend:
    build:
      context: ../web/frontend
      dockerfile: Dockerfile
    image: ${FRONTEND_HOST}
    container_name: ${FRONTEND_HOST}
    env_file:
      - ./public.env
    expose:
      - "${FRONTEND_PORT}:${FRONTEND_PORT}"
    volumes:
      - ../web/frontend/app:/app
    stop_grace_period: 1s
  backend:
    build:
      context: ../web/backend
      dockerfile: Dockerfile
    image: ${BACKEND_HOST}
    container_name: ${BACKEND_HOST}
    env_file:
      - ./public.env
    expose:
      - "${BACKEND_PORT}:${BACKEND_PORT}"
    volumes:
      - ../web/backend/app:/app:ro
  llm:
    build:
      context: ../llm
      dockerfile: Dockerfile
      args:
        - LLM_MODEL=${LLM_MODEL}
        - LLM_PORT=${LLM_PORT}
    image: ${LLM_HOST}
    container_name: ${LLM_HOST}
    env_file:
      - ./public.env
    expose:
      - "${LLM_PORT}:${LLM_PORT}"
  db:
    build:
      context: ../web/db
      dockerfile: Dockerfile
      args:
        - DB_USER=${POSTGRES_USER}
        - DB_PASSWORD=${POSTGRES_PASSWORD}
        - DB_NAME=${POSTGRES_DB}
        - DB_PORT=${POSTGRES_PORT}
    image: ${DB_HOST}
    container_name: ${DB_HOST}
    environment:
      - POSTGRES_PORT=${DB_PORT}
    env_file:
      - ./public.env
    expose:
      - "${DB_PORT}:${DB_PORT}"
    volumes:
      - db_data:/var/lib/postgresql/data
  proxy:
    build:
      context: ../web/proxy
      dockerfile: Dockerfile
      args:
        - BACKEND_HOST=${BACKEND_HOST}
        - BACKEND_PORT=${BACKEND_PORT}
        - FRONTEND_HOST=${FRONTEND_HOST}
        - FRONTEND_PORT=${FRONTEND_PORT}
    image: ${PROXY_HOST}
    container_name: ${PROXY_HOST}
    env_file:
      - ./public.env
    ports:
      - ${PROXY_PORT}:${PROXY_PORT}
      - ${PROXY_SSL_PORT}:${PROXY_SSL_PORT}
    depends_on:
      - frontend
      - backend

volumes:
  db_data: